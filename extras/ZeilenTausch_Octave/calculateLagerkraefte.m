# Clean Terminal and variablesclcclear all# Use custom pathaddpath("Functions")  # Get beispiel Knotenmatrix and ElementmatrixelementMatrix = [1,2;2,3;4,5;1,4;2,5;2,4;3,5]knotenMatrix  = [0,0;270,468;540,0;810,468;1080,0]aussenkraefteVektor = [0;0;4;-5;0;0;0;0;0;0];lagerVector = [1;2;10];     # Lager in Knoten 1 Y Richtung: 2 und so######################format short g# Bilde Liste der Elementsteifigkeiten kStab_listekStab_liste = buildkStab_liste(elementMatrix, knotenMatrix);# Bilde Element Indexvektor elementIndexVectorelementIndexVector = buildElementIndexVector(elementMatrix);# Bilde Systemsteifigkeitsmatrix K_matrxK_matrx = buildSystemSteifigkeitsMatrix(rows(knotenMatrix), kStab_liste, elementIndexVector);# Bringe Lagerknoten runterresortedK_mtrx = conservativeRowBottomPush(K_matrx,lagerVector);  K_matrx = resortedK_mtrx{1};K_matrx_multiplicand_sorting_vector= resortedK_mtrx{2};# Extract submatrices from Steifigkeitsmatrix and save them as individual variablesK_matrx_submatrices = extractSubmatricesFromK(K_matrx, rows(lagerVector));K_matrx_11 = K_matrx_submatrices{1,1};K_matrx_12 = K_matrx_submatrices{1,2};K_matrx_21 = K_matrx_submatrices{2,1};K_matrx_22 = K_matrx_submatrices{2,2};# Bilde pF from aussenKraefteVectorpF = aussenKraefteVectorTopF(aussenkraefteVektor, K_matrx_multiplicand_sorting_vector, rows(lagerVector));# Berechne Knotenverschiebungen vFvF = inv(K_matrx_11) * pF;# Ermittlung AuflagerreaktionsgroessenpR = K_matrx_21 * vF;endergebniss = pR